#! /usr/bin/env perl6
use v6.c;
use Test;

use-ok 'Structable';

use Structable;

#! check a type defenition against a variety of input values
sub type-table-test(Structable::Type $type, @tests) {
    for @tests -> ($value, $result) {
        is $type.type-check($value), $result, "{ $type.WHAT.perl } { $result ?? 'accepts' !! 'rejects' } { $value.WHAT.perl }";
    }
}

type-table-test struct-int('test-int'), (
    (1, True),
    (Int, True),
    (int, True),
    (Numeric, False),
    (1/1, False),
    (Any, False),
    ("String", False),
);

# Check str to int coercion
is struct-int('coercion test (Str --> Int)').coerce('1234').is-ok, True, "Str to Int coercion";

# Check str to int coercion
is struct-rat('coercion test (Str --> Rat').coerce('3.141592653589793').is-ok, True, "Str to Rat coercion";

type-table-test struct-str('test-str'), (
    (1, False),
    (Str, True),
    (1/1, False),
    (Any, False),
    ("Test String", True),
);

# Check string coercion
is struct-str('coercion test (Buf --> Str)').coerce('Testing...'.encode).is-ok, True, "Encoded string is decoded by coercion";

type-table-test struct-rat('test-rat'), (
    (1, False),
    (Str, False),
    (1/1, True),
    (Any, False),
    ("String", False),
    (Rat, True),
    (Numeric, False),
);

type-table-test struct-date('test-date'), (
    (1, False),
    (Str, False),
    (1/1, False),
    (Any, False),
    ("String", False),
    (Rat, False),
    (Numeric, False),
    # See coercion tests ('2019-02-04', True), # ISO reversed form
    (now.Date, True),       # Date object is also acceptable
    (now.DateTime, False),  # DateTime object is rejected
);

# check coercions
is struct-date('coercion test').coerce('2019-02-06').is-ok, True, "Str to Date coercion (date string)";
is struct-date('coercion test').coerce('2019-02-06T08:15:23').is-ok, False, "Str to DateTime coercion (ISO 8601 datetime string)";

# check simplification
is struct-date('simplification test').simplify(Date.today).is-ok, True, "Simplify Date to Str";

type-table-test struct-datetime('test-datetime'), (
    (1, False),
    (Str, False),
    (1/1, False),
    (Any, False),
    ("String", False),
    (Rat, False),
    (Numeric, False),
    # See coercion tests ('2019-02-04T08:15:23', True), # ISO 8601
    (now.Date, False),       # Date object is not acceptable
    (now.DateTime, True),       # DateTime object is also acceptable
);

# check coercions
is struct-datetime('coercion test').coerce('2019-02-06').is-ok, False, "Str to DateTime coercion (date string)";
is struct-datetime('coercion test').coerce('2019-02-06T08:15:23').is-ok, True, "Str to DateTime coercion (ISO 8601 datetime string)";
is struct-datetime('coercion test').coerce('2019-02-06T08:15:23+1100').is-ok, True, "Str to DateTime coercion (RFC 3339 datetime string)";

# check simplification
is struct-datetime('simplification test').simplify(DateTime.now).is-ok, True, "Simplify DateTime to Str";

type-table-test struct-bool('test-bool'), (
    (1, False),
    (Str, False),
    (1/1, False),
    (Any, False),
    ("String", False),
    (Rat, False),
    (Numeric, False),
    (Bool, True),
    (True, True),
    (False, True),
);

# check coercions
is struct-bool('bool-coercion').coerce(True).ok('Testing'), True, "True to Bool coercion (pass through)";
is struct-bool('bool-coercion').coerce(False).ok('Testing'), False, "False to Bool coercion (pass through)";
is struct-bool('bool-coercion').coerce(Any).ok('Testing'), False, "Any to Bool coercion (undefined False)";
is struct-bool('bool-coercion').coerce(0).ok('Testing'), False, "0 to Bool coercion (Int False)";
is struct-bool('bool-coercion').coerce(1).ok('Testing'), True, "1 to Bool coercion (Int True)";
is struct-bool('bool-coercion').coerce('0').ok('Testing'), False, "'0' to Bool coercion (Str False)";
is struct-bool('bool-coercion').coerce('').ok('Testing'), False, "'' to Bool coercion (Str False)";
is struct-bool('bool-coercion').coerce('1').ok('Testing'), True, "'1' to Bool coercion (Str True)";
is struct-bool('bool-coercion').coerce(0.1).ok('Testing'), True, "0.1 to Bool coercion (Rat True)";

#
# Conform tests
#

my $struct = struct-def
    (struct-int     'id_component', :optional),
    (struct-str     'name_component'),
    (struct-str     'desc_component', :maybe);

{
    my %something-from-json = %(
            :id_component(1),
            :name_component<SomeComponenent>,
            :desc_component(Str)
            );

    my $obj = conform $struct, %something-from-json;

    is $obj.is-ok, True, "map conformed ok";
    $obj .= ok("Error unwrapping conformed map");

    is-deeply $obj, %something-from-json, "conformed map equals original";

    is $obj{$struct.structure.grep(!*.maybe).map(*.name)}.all.so, True, "Values, excluding maybes, in conformed object defined";

    my %something-bad-from-json = %(
            :id_component(1),
            :not_name_component<SomeComponenent>
            );

    with conform($struct, %something-bad-from-json).err-to-undef {
        fail "bad results from conform should not pass through with";
    }
    else {
        pass "with catches bad conform results"
    }

    my %something-without-optional = %(
            :name_component<SomeNewComponenent>,
            :desc_component('No id. set here.')
            );

    is conform($struct, %something-without-optional).so, True, "conform ok without optional param";

    my %something-with-undef-optional = %(
            :id_component(Any),
            :name_component<SomeOtherComponenent>,
            :desc_component('Empty id. set here.')
            );

    is conform($struct, %something-with-undef-optional).so, True, "conform ok with undef optional param";

    # Default value tests
    my $default-struct = struct-def
            |$struct.structure,
            (struct-int 'value', :default(1));

    my Map $defined-default = %(
        :id_component(1),
        :name_component<SomeComponenent>,
        :desc_component('Default with a set value'),
        :value(10)
    );

    is conform($default-struct, $defined-default).so, True, "conform ok with defined default parameter";
    is conform($default-struct, $defined-default).?value<value>, 10, "conform defined value for field with default is not overriden";

    my Map $missing-default = %(
        :id_component(1),
        :name_component<SomeComponenent>,
        :desc_component('Default with missing parameter.')
    );

    is conform($default-struct, $missing-default).so, True, "conform ok with missing default parameter";
    is conform($default-struct, $missing-default).?value<value>, 1, "conform missing value for field with default is filled in";

    # Struct nested tests
    my $nested-struct = struct-def
            |$struct.structure,
            (struct-int 'value', :default(1)),
            (struct-nested 'sub-struct', $default-struct)
    ;

    my Map $nested-example = %(
            |$missing-default,
            sub-struct => $defined-default,
            );

    is conform($nested-struct, $nested-example).is-ok, True, "Conform - Nested struct accepts good Map";

    my Map $nested-example-bad = %(
            |$missing-default,
            sub-struct => %( foo => "bar", ),
            );

    is conform($nested-struct, $nested-example-bad).is-ok, False, "Conform - Nested struct rejects bad Map";

    my Map $nested-example-bad-type = %(
            |$missing-default,
                    sub-struct => 1,
            );

    is conform($nested-struct, $nested-example-bad-type).is-ok, False, "Conform - Nested struct rejects Type other than Map";

    # ListType tests
    my $listy-struct = struct-def
            |$struct.structure,
            (struct-list 'test-list', struct-str('test-list-value'));

    my Map $list-example = %(
            |$missing-default,
                    test-list => <a b c>,
            );

    is conform($listy-struct, $list-example).is-ok, True, "Conform - listy struct accepts good Map";

    my Map $list-example-list-type-error = %(
            |$missing-default,
                    test-list => (Map, Set, List),
            );

    is conform($listy-struct, $list-example-list-type-error).is-err, True, "Conform - listy struct rejects incompatible list in Map";

    my Map $list-example-list-not-list = %(
            |$missing-default,
                    test-list => 'foo',
            );

    is conform($listy-struct, $list-example-list-not-list).is-err, True, "Conform - listy struct rejects non-list value in Map";
}

#
# Simplify tests
#

{
    my $simplify-struct = struct-def
        |$struct.structure,
        (struct-int 'value', :default(1)),
        struct-datetime 'created';

    my Map $good-example = %(
        :id_component(1),
        :name_component<SomeComponenent>,
        :desc_component('What a fine example of a struct!'),
        :value(10),
        :created(DateTime.now),
    );

    is simplify($simplify-struct, $good-example).is-ok, True, "Simplify good example";
    is simplify($simplify-struct, $good-example).?value<value>, 10, "Simplify defined value for field with default is not overriden";

    # Missing field
    my Map $bad-example = %(
        :id_component(1),
        :created(DateTime.now),
    );

    is simplify($simplify-struct, $bad-example).is-ok, False, "Simplify bad example";

    # Missing optional field
    my Map $optional-example = %(
        :name_component<SomeOtherComponenent>,
        :desc_component(Str),
        :value(1),
        :created(DateTime.now),
    );

    is simplify($simplify-struct, $optional-example).is-ok, True, "Simplify optional example";

    # Undef optional field
    my Map $undef-optional-example = %(
        :id_component(Any),
        :name_component<SomeOtherComponenent>,
        :desc_component(Str),
        :value(1),
        :created(DateTime.now),
    );

    is simplify($simplify-struct, $undef-optional-example).is-ok, True, "Simplify undef optional example";

    # Missing default field
    my Map $default-example = %(
            :name_component<SomeOtherComponenent>,
            :desc_component(Str),
            :created(DateTime.now),
    );

    is simplify($simplify-struct, $default-example).is-ok, True, "Simplify default example";
    is simplify($simplify-struct, $default-example).?value<value>, 1, "Simplify field with default has value of default when not provided";

    # Undef default field
    my Map $undef-default-example = %(
            :id_component(Any),
            :name_component<SomeOtherComponenent>,
            :value(Any),
            :created(DateTime.now),
    );

    is simplify($simplify-struct, $undef-default-example).is-err, True, "Simplify undef default example";

    # Struct nested tests
    my $nested-struct = struct-def
            |$struct.structure,
            (struct-int 'value', :default(1)),
            (struct-nested 'sub-struct', $simplify-struct)
    ;

    my Map $nested-example = %(
            |$default-example,
            sub-struct => $default-example,
            );

    is simplify($nested-struct, $nested-example).is-ok, True, "Simplify - Nested struct accepts good Map";

    my Map $nested-example-bad = %(
            |$default-example,
                    sub-struct => %( foo => "bar", ),
            );

    is simplify($nested-struct, $nested-example-bad).is-ok, False, "Simplify - Nested struct rejects bad Map";

    my Map $nested-example-bad-type = %(
            |$default-example,
                    sub-struct => 1,
            );

    is simplify($nested-struct, $nested-example-bad-type).is-ok, False, "Simplify - Nested struct rejects type other than Map";

    # Struct nested test with to-simple
    use Result;

    my Bool $to-simple-called = False;
    my $nested-struct-with-simple = struct-def
        |$struct.structure,
        (struct-int 'value', :default(1)),
        (struct-nested 'sub-struct', $simplify-struct, :to-simple( { $to-simple-called = True; Ok .gist } ))
    ;

    # ensure delayed calling
    nok $to-simple-called, 'To simple not yet called';

    is simplify($nested-struct-with-simple, $nested-example).is-ok, True, "Simplify - nested struct simplify for rendering Map as Str";

    # Ensure to-simple was triggered
    ok $to-simple-called, 'To simple not yet called';


    # ListType tests
    my $listy-struct = struct-def
        |$struct.structure,
        (struct-list 'test-list', struct-str('test-list-value'));

    my Map $list-example = %(
        |$default-example,
        test-list => <a b c>,
    );

    is simplify($listy-struct, $list-example).is-ok, True, "Simplify - listy struct accepts good Map";

    my Map $list-example-list-type-error = %(
            |$default-example,
                    test-list => (1, 2, 3),
            );

    is simplify($listy-struct, $list-example-list-type-error).is-err, True, "Simplify - listy struct rejects incompatible list in Map";

    my Map $list-example-list-not-list = %(
            |$default-example,
                    test-list => 'foo',
            );

    is simplify($listy-struct, $list-example-list-not-list).is-err, True, "Simplify - listy struct rejects non-list value in Map";
}

done-testing
